{"version":3,"sources":["modules/aws/components/Uploading/styles.js","modules/aws/components/Uploading/index.js","constants.js","modules/aws/index.js","modules/aws/containers/AwsContainer.js","modules/azurev10/components/Uploading/styles.js","modules/azurev10/components/Uploading/index.js","modules/azurev10/index.js","modules/azurev10/containers/AzureContainer.js","modules/azurev12/components/Uploading/styles.js","modules/azurev12/components/Uploading/index.js","modules/azurev12/index.js","modules/azurev12/containers/AzureContainer.js","App.js","serviceWorker.js","index.js"],"names":["styles","wrapper","display","flexDirection","downloads","margin","input","width","withStyles","classes","uploadFiles","uploads","counter","console","log","className","type","onChange","multiple","map","file","href","location","key","download","target","rel","S3_CONFIG","bucketName","dirName","region","accessKeyId","secretAccessKey","AWS","useState","setUploads","React","setCounter","e","a","files","length","intervalStartTime","Date","now","awsInterval","setInterval","Array","from","forEach","ReactS3","uploadFile","then","result","newUploads","clearInterval","catch","err","error","container","name","requestId","Azure","blobService","azure","createBlobService","azureInterval","createBlockBlobFromBrowserFile","response","_containerName","_name","BlobServiceClient","blockBlobClient","getContainerClient","getBlockBlobClient","uploadBrowserData","uploadedFile","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.31d291f1.chunk.js","sourcesContent":["const styles = () => ({\n  wrapper: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  downloads: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    margin: \"20px 0\"\n  },\n  input: {\n    width: 120\n  }\n});\n\nexport default styles;\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport styles from \"./styles\";\n\nconst Uploading = ({ classes, uploadFiles, uploads, counter }) => {\n  console.log(uploads);\n  return (\n    <div className={classes.wrapper}>\n      <h2>AWS</h2>\n      <input\n        className={classes.input}\n        type=\"file\"\n        onChange={uploadFiles}\n        multiple\n      />\n      <div className={classes.downloads}>\n        {uploads.map(\n          file =>\n            file && (\n              <a\n                href={file.location}\n                key={file.key}\n                download\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {file.key}\n              </a>\n            )\n        )}\n      </div>\n      <p>{counter} Seconds</p>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(Uploading);\n","export const S3_CONFIG = {\n  bucketName: \"uploading-comparison\",\n  dirName: \"test\" /* optional */,\n  region: \"eu-central-1\",\n  accessKeyId: \"AKIAIFZRA2GPRQUR6WYQ\",\n  secretAccessKey: \"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\",\n};\n\nexport const AZURE_ACCOUNT = \"testtabeebblob\";\nexport const AZURE_CONTAINER = \"testcontainer\";\nexport const AZURE_KEY =\n  \"3R0ANZD7PesJGHXaSyQmDu/skzKy0W7FI3HjnQs21E4UJr310wD14yFtWakZMgaeJfMCevX0qjOC+eb62I53Ig==\";\nexport const AZURE_SAS =\n  \"?sv=2019-02-02&ss=b&srt=sco&sp=rwdlac&se=2020-08-21T15:09:01Z&st=2020-04-21T07:09:01Z&spr=https,http&sig=riH9T%2FQbRWlj0bymuOd7aDdiPtq2Fud5eITG2qmRiGQ%3D\";\n\n/* export const S3_CONFIG = {\n  bucketName: \"tabeebtest\",\n  // dirName: \"test\",\n  region: \"us-east-1\",\n  accessKeyId: \"AKIA4LM7OMI35SQEOHK5\",\n  secretAccessKey: \"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\",\n};\n\nexport const AZURE_ACCOUNT = \"tabeebtest\";\n  export const AZURE_CONTAINER = \"assets\";\n  export const AZURE_KEY =\n    \"CAv3uHE6JCVlvU+v6ySz+zII4MY3trQNi+Gr0npF6E8qIA7SxDfsA/wWWDpvivc1wlIBFd23OyrN9Hx9PO5fEA==\";\n  export const AZURE_SAS =\n    \"?sv=2018-03-28&sr=c&sig=bd1wAkaKsKf%2F3GmUm5W2WogHAsTuLJzVHNOJ79c5Wps%3D&se=2020-04-17T08%3A59%3A20Z&sp=w\";\n*/\n","import AWS from \"./containers/AwsContainer\";\n\nexport default AWS;\n","import React, { useState } from \"react\";\nimport ReactS3 from \"react-s3\";\n\nimport Uploading from \"../components/Uploading\";\nimport { S3_CONFIG } from \"../../../constants\";\n\nconst AwsContainer = () => {\n  const [uploads, setUploads] = useState([]);\n  const [counter, setCounter] = React.useState(0);\n\n  const uploadFiles = async e => {\n    setUploads([]);\n    setCounter(0);\n\n    const files = e.target.files;\n    if (files && files.length) {\n      const intervalStartTime = Date.now();\n      const awsInterval = setInterval(\n        () => setCounter((Date.now() - intervalStartTime) / 1000),\n        500\n      );\n      Array.from(files).forEach(file => {\n        ReactS3.uploadFile(file, S3_CONFIG)\n          .then(result => {\n            setUploads(uploads => {\n              const newUploads = [...uploads, result];\n              if (newUploads.length === files.length) {\n                clearInterval(awsInterval);\n              }\n              return newUploads;\n            });\n          })\n          .catch(err => console.error(err));\n      });\n    }\n  };\n\n  return (\n    <Uploading uploadFiles={uploadFiles} uploads={uploads} counter={counter} />\n  );\n};\n\nexport default AwsContainer;\n","const styles = () => ({\n  wrapper: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  downloads: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    margin: \"20px 0\"\n  },\n  input: {\n    width: 120\n  }\n});\n\nexport default styles;\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport { AZURE_ACCOUNT } from \"../../../../constants\";\nimport styles from \"./styles\";\n\nconst Uploading = ({ classes, uploadFiles, uploads, counter }) => {\n  console.log(uploads);\n  return (\n    <div className={classes.wrapper}>\n      <h2>Azure v2-current</h2>\n      <input\n        className={classes.input}\n        type=\"file\"\n        onChange={uploadFiles}\n        multiple\n      />\n      <div className={classes.downloads}>\n        {uploads.map(\n          file =>\n            file && (\n              <a\n                href={`https://${AZURE_ACCOUNT}.blob.core.windows.net/${file &&\n                  file.container}/${file && file.name}`}\n                key={file && file.requestId}\n                download\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {file && file.name}\n              </a>\n            )\n        )}\n      </div>\n      <p>{counter} Seconds</p>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(Uploading);\n","import Azure from \"./containers/AzureContainer\";\n\nexport default Azure;\n","import React, { useState } from \"react\";\nimport azure from \"azure-storage/browser/azure-storage.blob.export\";\n\nimport Uploading from \"../components/Uploading\";\nimport { AZURE_ACCOUNT, AZURE_CONTAINER, AZURE_KEY } from \"../../../constants\";\n\nconst AzureContainer = () => {\n  const [uploads, setUploads] = useState([]);\n  const [counter, setCounter] = React.useState(0);\n\n  const blobService = azure.createBlobService(AZURE_ACCOUNT, AZURE_KEY);\n\n  const uploadFiles = async e => {\n    setUploads([]);\n    setCounter(0);\n\n    const files = e.target.files;\n    if (files && files.length) {\n      const intervalStartTime = Date.now();\n      const azureInterval = setInterval(\n        () => setCounter((Date.now() - intervalStartTime) / 1000),\n        500\n      );\n      Array.from(files).forEach(file => {\n        blobService.createBlockBlobFromBrowserFile(\n          AZURE_CONTAINER,\n          file.name,\n          file,\n          function(error, result, response) {\n            setUploads(uploads => {\n              const newUploads = [...uploads, result];\n              if (newUploads.length === files.length) {\n                clearInterval(azureInterval);\n              }\n              return newUploads;\n            });\n          }\n        );\n      });\n    }\n  };\n\n  return (\n    <Uploading uploadFiles={uploadFiles} uploads={uploads} counter={counter} />\n  );\n};\n\nexport default AzureContainer;\n","const styles = () => ({\n  wrapper: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  downloads: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    margin: \"20px 0\"\n  },\n  input: {\n    width: 120\n  }\n});\n\nexport default styles;\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport { AZURE_ACCOUNT } from \"../../../../constants\";\nimport styles from \"./styles\";\n\nconst Uploading = ({ classes, uploadFiles, uploads, counter }) => {\n  console.log(uploads);\n  return (\n    <div className={classes.wrapper}>\n      <h2>Azure v12</h2>\n      <input\n        className={classes.input}\n        type=\"file\"\n        onChange={uploadFiles}\n        multiple\n      />\n      <div className={classes.downloads}>\n        {uploads.map(\n          file =>\n            file && (\n              <a\n                href={`https://${AZURE_ACCOUNT}.blob.core.windows.net/${file._containerName}/${file._name}`}\n                key={file.requestId}\n                download\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {file._name}\n              </a>\n            )\n        )}\n      </div>\n      <p>{counter} Seconds</p>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(Uploading);\n","import Azure from \"./containers/AzureContainer\";\n\nexport default Azure;\n","import React, { useState } from \"react\";\nimport { BlobServiceClient } from \"@azure/storage-blob\";\n\nimport Uploading from \"../components/Uploading\";\nimport { AZURE_ACCOUNT, AZURE_CONTAINER, AZURE_SAS } from \"../../../constants\";\n\nconst AzureContainer = () => {\n  const [uploads, setUploads] = useState([]);\n  const [counter, setCounter] = React.useState(0);\n\n  const blobService = new BlobServiceClient(\n    `https://${AZURE_ACCOUNT}.blob.core.windows.net${AZURE_SAS}`\n  );\n\n  const uploadFiles = async e => {\n    setUploads([]);\n    setCounter(0);\n\n    const files = e.target.files;\n    if (files && files.length) {\n      const intervalStartTime = Date.now();\n      const azureInterval = setInterval(\n        () => setCounter((Date.now() - intervalStartTime) / 1000),\n        500\n      );\n      Array.from(files).forEach(file => {\n        const containerClient = blobService.getContainerClient(AZURE_CONTAINER);\n        const blockBlobClient = containerClient.getBlockBlobClient(file.name);\n        blockBlobClient\n          .uploadBrowserData(file)\n          .then(uploadedFile => {\n            setUploads(uploads => {\n              const newUploads = [\n                ...uploads,\n                { ...uploadedFile, ...blockBlobClient }\n              ];\n              if (newUploads.length === files.length) {\n                clearInterval(azureInterval);\n              }\n              return newUploads;\n            });\n          })\n          .catch(error => {\n            console.log(error);\n          });\n      });\n    }\n  };\n\n  return (\n    <Uploading uploadFiles={uploadFiles} uploads={uploads} counter={counter} />\n  );\n};\n\nexport default AzureContainer;\n","import React from \"react\";\n\nimport \"./App.css\";\nimport AWS from \"./modules/aws\";\nimport AzureV10 from \"./modules/azurev10\";\nimport AzureV12 from \"./modules/azurev12\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AWS />\n      <AzureV10 />\n      <AzureV12 />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}